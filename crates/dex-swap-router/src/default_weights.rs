
//! Autogenerated weights for dex_swap_router
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `enterprise`, CPU: `Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// dex-swap-router
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// crates/dex-swap-router/src/default_weights.rs
// --template
// .deploy/default-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for dex_swap_router.
pub trait WeightInfo {
	fn swap_exact_tokens_for_tokens_general(a: u32, ) -> Weight;
	fn swap_exact_tokens_for_tokens_stable(c: u32, ) -> Weight;
}

/// Weights for dex_swap_router using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Tokens Accounts (r:28 w:28)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: DexGeneral PairStatuses (r:9 w:0)
	/// Proof: DexGeneral PairStatuses (max_values: None, max_size: Some(163), added: 2638, mode: MaxEncodedLen)
	/// Storage: System Account (r:9 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[2, 10]`.
	fn swap_exact_tokens_for_tokens_general(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `951 + a * (677 ±0)`
		//  Estimated: `15601 + a * (9007 ±15)`
		// Minimum execution time: 106_940_000 picoseconds.
		Weight::from_parts(74_665_802, 15601)
			// Standard Error: 530_269
			.saturating_add(Weight::from_parts(55_952_606, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 9007).saturating_mul(a.into()))
	}
	/// Storage: DexStable Pools (r:9 w:9)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:28 w:28)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:9 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `c` is `[2, 10]`.
	fn swap_exact_tokens_for_tokens_stable(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1028 + c * (864 ±0)`
		//  Estimated: `16757 + c * (9459 ±19)`
		// Minimum execution time: 113_210_000 picoseconds.
		Weight::from_parts(114_711_000, 16757)
			// Standard Error: 363_551
			.saturating_add(Weight::from_parts(48_438_083, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 9459).saturating_mul(c.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Tokens Accounts (r:28 w:28)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: DexGeneral PairStatuses (r:9 w:0)
	/// Proof: DexGeneral PairStatuses (max_values: None, max_size: Some(163), added: 2638, mode: MaxEncodedLen)
	/// Storage: System Account (r:9 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[2, 10]`.
	fn swap_exact_tokens_for_tokens_general(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `951 + a * (677 ±0)`
		//  Estimated: `15601 + a * (9007 ±15)`
		// Minimum execution time: 106_940_000 picoseconds.
		Weight::from_parts(74_665_802, 15601)
			// Standard Error: 530_269
			.saturating_add(Weight::from_parts(55_952_606, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(a.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 9007).saturating_mul(a.into()))
	}
	/// Storage: DexStable Pools (r:9 w:9)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:28 w:28)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:9 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `c` is `[2, 10]`.
	fn swap_exact_tokens_for_tokens_stable(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1028 + c * (864 ±0)`
		//  Estimated: `16757 + c * (9459 ±19)`
		// Minimum execution time: 113_210_000 picoseconds.
		Weight::from_parts(114_711_000, 16757)
			// Standard Error: 363_551
			.saturating_add(Weight::from_parts(48_438_083, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 9459).saturating_mul(c.into()))
	}
}
